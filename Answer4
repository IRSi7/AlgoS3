#include <bits/stdc++.h>

template <class T>
class RWTree
{
private:
    //Переменные
    T *key = nullptr;
    RWTree<T> *parent = nullptr;
    RWTree<T> *left = nullptr;
    RWTree<T> *right = nullptr;
    bool colour = false; // True - Red, False - Black

    //Прототипы функций
    bool inserter(T);
    bool remover(T);
    void RightRotate(RWTree<T> *Cur);
    void LeftRotate(RWTree<T> *Cur);
    void balance_insert(RWTree <T> *Cur);
    void move_up(RWTree<T> *A);
    void check_root(RWTree<T> *A);
    bool finder(T);
    void drop(RWTree<T> &A);
    void balance_drop(RWTree<T> *A);
public:
//Прототипы функций для пользователя
    bool insert(T); //Элемент успешно вставлен - true, элемент уже есть в древе - false;
    bool remove(T); //Элемент успешно удалён - true, элемент отсутствует в древе - false;
    bool find(T); //Элемент успешно найден - true, элемент отсутствует в древе - false;
};

//Конструкторы
template <typename T>
void RWTree<T>::balance_drop(RWTree<T> *A) {

    if(A->parent == nullptr) { // Если узел корень
        A->colour = false; //Красим его в чёрный
        return;
    }

    bool *BL = nullptr; //Цвет правого ребёнка брата
    bool *BR = nullptr; //Цвет левого ребёнка брата
    bool RL; // Отец правый ребёнок - true, отец левый ребёнок - false
    RWTree<T> *father;
    RWTree<T> *brother;

    father = A->parent;
    if (A == father->left) { // A левый ребёнок
        brother = father->right;
        RL = false;
    } else {
        brother = father->left;
        RL = true;
    }

    if(!RL) {
        if (brother->colour) //Если брат красный
        {
            brother->colour = false; // Брата в чёрный
            father->colour = true; //Отца в красный
            LeftRotate(father);
        }

        if ((brother->left != nullptr && brother->right != nullptr) && (brother->left->colour && brother->right->colour))
            brother->colour = true;

        else {
        if(brother != nullptr && !brother->right->colour) {  // "брат" красный с черными правым ребенком
            brother->left->colour = false;
            brother->colour = true;
            RightRotate(brother);
        }
        brother->colour = father->colour;   // случай, рассматриваемый в последнем подпункте
        father->colour = false;
        if(brother->right != nullptr)
            brother->right->colour = false;
        LeftRotate(father);
        A = father;
        }
    }
    else {
        if (brother->colour) //Если брат красный
        {
            brother->colour = false; // Брата в чёрный
            father->colour = true; //Отца в красный
            RightRotate(father);
        }

        if ((brother->left != nullptr && brother->right != nullptr) && (brother->left->colour && brother->right->colour))
            brother->colour = true;

        else {
            if(brother->right != nullptr && !brother->right->colour) {  // "брат" красный с черными левым ребенком
                brother->right->colour = false;
                brother->colour = true;
                LeftRotate(brother);
            }
            brother->colour = father->colour;   // случай, рассматриваемый в последнем подпункте
            father->colour = false;
            if(brother->left != nullptr)
                brother->left->colour = false;
            LeftRotate(father);
            A = father;
        }
    }
    if(!A->colour)
        balance_drop(A);
}

template <typename T>
bool RWTree<T>::remove(T mean) {
    if (key != nullptr)
        check_root(this);
    remover(mean);
}

template <typename T>
bool RWTree<T>::remover(T mean) {
    if(mean < *key){ //Вставляемый элемент меньше
        if(left == nullptr){  //Левый сын лист, значит искомого элемента в древе нет
            return false;
        }
        return left->remover(mean); // Левый сын не лист, значит спускаемся вниз
    }
    if(mean > *key){ //Вставляемый элемент больше
        if(right == nullptr){  //Правый сын лист, значит искомого элемента в древе нет
            return false;
        }
        return right->remover(mean); // Левый сын не лист, значит спускаемся вниз
    }
    if(mean == *key)  // Нашли такое же значение, возвращаем true и удаляем элемент
        drop(*this);
        return true;
}

template <typename T>
void RWTree<T>::drop(RWTree<T> &A) {
    if (A.right == nullptr && A.left == nullptr) { //У А нет детей
        if(A.parent == nullptr) // Если А - корень
            A.key = nullptr; // Сбрасываем его значение
        else{
            if(&A == A.parent->left) //Если А левый сын
                A.parent->left = nullptr; // Сбрасываем значение левого сына
            else
                A.parent->right = nullptr;// Сбрасываем значение правого сына
        }
        return;
    }
    if (A.left != nullptr && A.right != nullptr) { //Если два сына
        auto next = &A;
        while(next->left == nullptr){
            if(next->right != nullptr)
                next = next->right;
            else
                next = next->parent;
        }
        if (next->right != nullptr) // next имеет правого ребенка
            next->right->parent = next->parent;
        if (next->parent == nullptr)
            next->parent = next->right;
        else{
            A.right->parent = A.parent;
            next->left = A.left;
            A.left->parent = next;
            if(&A == A.parent->left) //Если А левый сын
                A.parent->left = A.right; // Левым сыном отца становится правый сын А
            else
                A.parent->right = A.right;// Правым сыном отца становится правый сын А
        }
        if(next != &A){
            A.colour = next->colour;
            A.key = next->key;
        }
        if(!next->colour) // при удалении чёрной вершины мог нарушиться баланс
            balance_drop(next);
    }
    else {     // один ребёнок
        if(A.left != nullptr){ //Если существующий сын левый
            A.left->parent = A.parent;
            if(&A == A.parent->left) //Если А левый сын
                A.parent->left = A.left; // Левым сыном отца становится левый сын А
            else
                A.parent->right = A.left;// Правым сыном отца становится левый сын А
        }
        else{
            A.right->parent = A.parent;
            if(&A == A.parent->left) //Если А левый сын
                A.parent->left = A.right; // Левым сыном отца становится правый сын А
            else
                A.parent->right = A.right;// Правым сыном отца становится правый сын А
        }
    }
}

template <typename T>
void RWTree<T>::move_up(RWTree<T> *A) { // Задаём всех родствеников
    RWTree<T> *awap = A->parent;
    RWTree<T> *swap = new RWTree<T> (*A);
    *A = *A->parent;
    delete awap;
    if(A == A->right) {
        A->right = swap;
        A->right->parent = A;
        A->left->parent = A;
        if(A->right->left != nullptr)
            A->right->left->parent = A->right;
        if(A->right->right != nullptr)
            A->right->right->parent = A->right;
    }
    if(A == A->left) {
        A->left = swap;
        A->right->parent = A;
        A->left->parent = A;
        if(A->left->left != nullptr)
            A->left->left->parent = A->left;
        if(A->left->right != nullptr)
            A->left->right->parent = A->left;
    }
}

template <typename T>
bool RWTree<T>::finder(T mean)
{
    if(mean < *key){ //Вставляемый элемент меньше
        if(left == nullptr){  //Левый сын лист, значит искомого элемента в древе нет
            return false;
        }
        return left->finder(mean); // Левый сын не лист, значит спускаемся вниз
    }
    if(mean > *key){ //Вставляемый элемент больше
        if(right == nullptr){  //Правый сын лист, значит искомого элемента в древе нет
            return false;
        }
        return right->finder(mean); // Левый сын не лист, значит спускаемся вниз
    }
    if(mean == *key)  // Нашли такое же значение, возвращаем ложь
        return true;
}

template <typename T>
void RWTree<T>::check_root(RWTree<T> *A) { //Проверка входим ли мы в дерево с корня
    while(A->parent != nullptr)
    {
        move_up(A); // Пока не дойдём до корня поднимаемся вверх
    }
}

template <typename T>
void RWTree<T>::RightRotate(RWTree<T> *Cur) { //
    RWTree<T> *boomer;
    Cur->left->parent = Cur->parent;
    if(Cur->left->right != nullptr) {
        Cur->parent = Cur;
        Cur->right->parent = Cur->left;
        boomer = new RWTree<T>(*Cur); // Запоминаем Cur
        boomer->left = Cur->left->right;
        *Cur = *Cur->left;
        boomer->left = Cur->right;
        *Cur->left->parent = *boomer;
        Cur->right = Cur->left->parent;
        if(Cur->left != nullptr)
            Cur->left->parent = Cur;
        delete boomer;
    }
    else {
        boomer = new RWTree<T>(*Cur);
        boomer->parent = Cur;
        boomer->left = nullptr;
        Cur->left->parent = Cur->parent;
        if(Cur->right == nullptr)
            Cur->left->right = Cur->left;
        Cur->left->right = Cur->left;
        *Cur = *Cur->left; //Меняем местами Cur и его левого сына
        *Cur->right = *boomer;
        if (Cur->left != nullptr) //Поправляем ссылку левого сына Cur
            Cur->left->parent = Cur;
        if (Cur->right != nullptr)//Поправляем ссылку правого сына Cur
            Cur->right->parent = Cur;
    }

}

template <typename T>
void RWTree<T>::LeftRotate(RWTree<T> *Cur) {
    RWTree<T> *boomer;
    if(Cur->right->left != nullptr) {
        Cur->right->parent = Cur->parent;
        Cur->parent = Cur;
        Cur->left->parent = Cur->right;
        boomer = new RWTree<T>(*Cur); // Запоминаем Cur
        boomer->right = Cur->right->left;
        *Cur = *Cur->right;
        boomer->right = Cur->left;
        *Cur->right->parent = *boomer;
        Cur->left = Cur->right->parent;
        if(Cur->right != nullptr)
            Cur->right->parent = Cur;
        delete boomer;
    }
    else {
        boomer = new RWTree<T>(*Cur);
        boomer->parent = Cur;
        boomer->right = nullptr;
        Cur->right->parent = Cur->parent;
        if(Cur->left == nullptr)
            Cur->right->left = Cur->right;
        *Cur = *Cur->right; //Меняем местами Cur и его левого сына
        *Cur->left = *boomer;
        if (Cur->left != nullptr) //Поправляем ссылку левого сына Cur
            Cur->left->parent = Cur;
        if (Cur->right != nullptr)//Поправляем ссылку правого сына Cur
            Cur->right->parent = Cur;
    }
}

template <typename T>
void RWTree<T>::balance_insert(RWTree<T> *Cur) {
    if(Cur->parent == nullptr) { // Если узел корень
        Cur->colour = false; //Красим его в чёрный
        return;
    }

    bool RL; // Отец правый ребёнок - true, отец левый ребёнок - false
    RWTree<T> *father = nullptr;
    RWTree<T> *grandfather = nullptr;
    RWTree<T> *uncle = nullptr;

    if(Cur->parent != nullptr) {
        father = Cur->parent;
        if (Cur->parent->parent != nullptr) {
            grandfather = Cur->parent->parent;
            if (father == grandfather->left) { // Отец левый ребёнок
                uncle = grandfather->right;
                RL = false;
            } else {
                uncle = grandfather->left;
                RL = true;
            }
        }
    }

    if(!RL) { //Отец левый ребёнок
        if (uncle != nullptr && uncle->colour) { //Есть Дядя и он красный
            if (uncle->colour) { //Если дядя красный
                father->colour = false; //Отца в чёрный
                uncle->colour = false; //Дядю в чёрный
                grandfather->colour = true; //Деда в красный
                Cur = grandfather; // Далее рассматриваем относительно деда
            }
        } else { // Случай когда дяди нет или он чёрный
                if (Cur == father->right) { // Если Cur - правый сын
                    Cur = father;
                    LeftRotate(Cur);
                }
                father->colour = false; // Отца в чёрный
                grandfather->colour = true; // Деда в красный
                RightRotate(grandfather);
            }
    }
    else { // Отец правый ребёнок
        if(uncle != nullptr && uncle->colour) { //Есть Дядя
                father->colour = false; //Отца в чёрный
                uncle->colour = false; //Дядю в чёрный
                grandfather->colour = true; //Деда в красный
                Cur = grandfather; // Далее рассматриваем относительно деда
        }
        else{ // Случай когда дяди нет или он чёрный
            if(Cur == father->left) { // Если Cur - левый сын
                Cur = father;
                RightRotate(Cur); //*******
            }
            father->colour = false; // Отца в чёрный
            grandfather->colour = true; // Деда в красный
            LeftRotate(grandfather);
        }
    }
    if(Cur->parent == nullptr) { // Если узел корень
        Cur->colour = false; //Красим его в чёрный
        return;
    }
    if(Cur->parent->colour)
        balance_insert(Cur);
}

template <typename T>
bool RWTree<T>::insert(T mean) {
    if (key != nullptr)
        check_root(this);
    inserter(mean);
}

template <typename T>
bool RWTree<T>::inserter(T mean) {
    RWTree<T> *Cur = this;
    if(key == nullptr){ //this - лист
        key = new int(mean); //Присваимаем this значение
        if(parent != nullptr) { //this - не корень
            colour = true;
            if (parent->colour) //Если отец красный, производим балансировку
                balance_insert(Cur);
        }
        return true;
    }
    if(mean < *key){ //Вставляемый элемент меньше
        if(left == nullptr){  //Левый сын лист, значит заменяем его нашим значением
            left = new RWTree<T>;
            left->parent = this;
        }
        return left->inserter(mean); // Левый сын не лист, значит спускаемся вниз
    }
    if(mean > *key){ //Вставляемый элемент больше
        if(right == nullptr){  //Левый сын лист, значит заменяем его нашим значением
            right = new RWTree<T>;
            right->parent = this;
        }
        return right->inserter(mean); // Левый сын не лист, значит спускаемся вниз
    }
    if(mean == *key)  // Нашли такое же значение, возвращаем ложь
        return false;
}

template <typename T>
bool RWTree<T>::find(T mean)
{
    if (key != nullptr)
        check_root(this);
    finder(mean);
}

int main() {
    RWTree<int> Test;

    int i = 1<<15;
    for(i;i>0;i--)
    Test.insert(rand()%1000);

    std::cout << Test.find(0);

    i = 1<<15;
    for(i;i>0;i--)
        std::cout << Test.remove(rand()%1000);


    std::cout << Test.find(14);
    std::cout << Test.find(16);
    std::cout << Test.find(12);
    std::cout << Test.find(10);
    std::cout << Test.find(7);
    std::cout << Test.find(5);
    std::cout << Test.find(3);
    std::cout << Test.find(2);
    std::cout << Test.find(6);
    std::cout << Test.find(18);
    std::cout << Test.find(20);

    return 0;
}
